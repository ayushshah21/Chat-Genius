// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DIRECT
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String?
  googleId  String?  @unique
  name      String?
  avatarUrl String?
  status    String?  @default("offline")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // AI-related fields
  communicationStyle String?  @default("professional")
  commonPhrases      String[] @default([])
  autoReplyEnabled   Boolean  @default(false)
  aiSettings         Json? // For additional AI-specific settings

  // Relations
  messages         Message[]
  channels         Channel[]       @relation("ChannelMembers")
  createdChannels  Channel[]       @relation("ChannelCreator")
  sentMessages     DirectMessage[] @relation("SenderMessages")
  receivedMessages DirectMessage[] @relation("ReceiverMessages")
  reactions        EmojiReaction[]
  files            File[]
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(PUBLIC)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  createdBy String
  creator   User        @relation("ChannelCreator", fields: [createdBy], references: [id])
  members   User[]      @relation("ChannelMembers")
  messages  Message[]
}

model Message {
  id        String   @id @default(uuid())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAI      Boolean  @default(false)

  // Relations
  userId    String?
  user      User?   @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])

  // Thread support
  parentId String?
  parent   Message?  @relation("ThreadReplies", fields: [parentId], references: [id])
  replies  Message[] @relation("ThreadReplies")

  reactions EmojiReaction[]
  files     File[]
}

model DirectMessage {
  id        String   @id @default(uuid())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAI      Boolean  @default(false)

  // Relations
  senderId   String
  sender     User   @relation("SenderMessages", fields: [senderId], references: [id])
  receiverId String
  receiver   User   @relation("ReceiverMessages", fields: [receiverId], references: [id])

  // Thread support
  parentId String?
  parent   DirectMessage?  @relation("ThreadReplies", fields: [parentId], references: [id])
  replies  DirectMessage[] @relation("ThreadReplies")

  reactions EmojiReaction[]
  files     File[]
}

model EmojiReaction {
  id        String   @id @default(uuid())
  emoji     String
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Message relations (one of these will be set)
  messageId String?
  message   Message?       @relation(fields: [messageId], references: [id])
  dmId      String?
  dm        DirectMessage? @relation(fields: [dmId], references: [id])
}

model File {
  id        String   @id @default(uuid())
  name      String
  type      String
  size      Int
  url       String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Message relations (one of these will be set)
  messageId String?
  message   Message?       @relation(fields: [messageId], references: [id])
  dmId      String?
  dm        DirectMessage? @relation(fields: [dmId], references: [id])
}
